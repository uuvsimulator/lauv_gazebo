<launch>
    <arg name="uuv_name" default="lauv"/>
    <arg name="max_forward_speed" default="2"/>
    <arg name="dubins_radius" default="15"/>
    <arg name="min_thrust" default="0"/>
    <arg name="max_thrust" default="30"/>
    <arg name="thrust_p_gain" default="2.5"/>
    <arg name="thrust_d_gain" default="2.0"/>
    <arg name="p_roll" default="0.1"/>
    <arg name="p_pitch" default="3.0"/>
    <arg name="d_pitch" default="0.5"/>
    <arg name="p_yaw" default="2.0"/>
    <arg name="d_yaw" default="0.1"/>
    <arg name="n_fins" default="4"/>
    <arg name="map_roll" default="1,1,1,1"/>
    <arg name="map_pitch" default="0,1,0,-1"/>
    <arg name="map_yaw" default="-1,0,1,0"/>
    <arg name="max_fin_angle" default="1.396263402"/>
    <arg name="idle_radius" default="15"/>
    <arg name="look_ahead_delay" default="0.0"/>
    <arg name="dubins_max_pitch" default="0.26"/>
    <arg name="desired_pitch_limit" default="0.26"/>
    <arg name="yaw_error_limit" default="1.57"/>
    <arg name="gui_on" default="true"/>
    <arg name="use_ned_frame" default="false"/>
    <arg name="stamped_pose_only" default="false"/>
    <arg name="timeout_idle_mode" default="50"/>

    <!-- Thruster configuration -->
    <arg name="thruster_topic" default="thrusters/0/input"/>
    <arg name="thruster_topic_prefix" default="thrusters" />
    <arg name="thruster_topic_suffix" default="input" />
    <arg name="thruster_frame_base" default="thruster_" />
    <arg name="thruster_conversion_fcn" default="proportional" />
    <!-- For proportional thruster model: gain * rotor_ang_vel * |rotor_ang_vel| -->
    <arg name="thruster_gain" default="0.0002"/>

    <arg name="fin_topic_prefix" default="fins"/>
    <arg name="fin_topic_suffix" default="input"/>

    <!-- This node just reads the trajectory and waypoint topics and publishes
       visualization markers for RViz -->
    <group if="$(var gui_on)">
        <group ns="$(var uuv_name)">
            <node pkg="uuv_control_utils"
                exec="trajectory_marker_publisher.py"
                name="trajectory_marker_publisher"
                output="screen"/>
        </group>
    </group>

    <group ns="$(var uuv_name)">
      <node pkg="uuv_trajectory_control"
            exec="auv_geometric_tracking_controller.py"
            name="auv_geometric_tracking_controller"
            output="screen"
            unless="$(var use_ned_frame)">
        <remap from="odom" to="pose_gt"/>
        <rosparam subst_value="true">
            timeout_idle_mode: $(var timeout_idle_mode)
            max_forward_speed: $(var max_forward_speed)
            base_link: base_link
            is_underactuated: true
            stamped_pose_only: $(var stamped_pose_only)
            inertial_frame_id: world
            min_thrust: $(var min_thrust)
            max_thrust: $(var max_thrust)
            thruster_topic: $(var thruster_topic)
            thrust_p_gain: $(var thrust_p_gain)
            thrust_d_gain: $(var thrust_d_gain)
            p_roll: $(var p_roll)
            p_pitch: $(var p_pitch)
            d_pitch: $(var d_pitch)
            p_yaw: $(var p_yaw)
            d_yaw: $(var d_yaw)
            n_fins: $(var n_fins)
            map_roll: [$(var map_roll)]
            map_pitch: [$(var map_pitch)]
            map_yaw: [$(var map_yaw)]
            fin_topic_prefix: $(var fin_topic_prefix)
            fin_topic_suffix: $(var fin_topic_suffix)
            max_fin_angle: $(var max_fin_angle)
            idle_radius: $(var idle_radius)
            look_ahead_delay: $(var look_ahead_delay)
            desired_pitch_limit: $(var desired_pitch_limit)
            yaw_error_limit: $(var yaw_error_limit)
            dubins:
                radius: $(var dubins_radius)
                max_pitch: $(var dubins_max_pitch)
            lipb:
                radius: $(var dubins_radius)
            thruster_config:
                topic_prefix: $(var thruster_topic_prefix)
                topic_suffix: $(var thruster_topic_suffix)
                frame_base: $(var thruster_frame_base)
                max_thrust: $(var max_thrust)
                conversion_fcn: $(var thruster_conversion_fcn)
                conversion_fcn_params:
                    gain: $(var thruster_gain)
        </rosparam>
      </node>

      <node pkg="uuv_trajectory_control"
            exec="auv_geometric_tracking_controller.py"
            name="auv_geometric_tracking_controller"
            output="screen"
            if="$(var use_ned_frame)">
        <remap from="odom" to="pose_gt_ned"/>
        <rosparam subst_value="true">
            timeout_idle_mode: $(var timeout_idle_mode)
            max_forward_speed: $(var max_forward_speed)
            base_link: base_link
            is_underactuated: true
            stamped_pose_only: $(var stamped_pose_only)
            inertial_frame_id: world_ned
            min_thrust: $(var min_thrust)
            max_thrust: $(var max_thrust)
            thruster_topic: $(var thruster_topic)
            thrust_p_gain: $(var thrust_p_gain)
            thrust_d_gain: $(var thrust_d_gain)
            p_roll: $(var p_roll)
            p_pitch: $(var p_pitch)
            d_pitch: $(var d_pitch)
            p_yaw: $(var p_yaw)
            d_yaw: $(var d_yaw)
            n_fins: $(var n_fins)
            map_roll: [$(var map_roll)]
            map_pitch: [$(var map_pitch)]
            map_yaw: [$(var map_yaw)]
            fin_topic_prefix: $(var fin_topic_prefix)
            fin_topic_suffix: $(var fin_topic_suffix)
            max_fin_angle: $(var max_fin_angle)
            idle_radius: $(var idle_radius)
            look_ahead_delay: $(var look_ahead_delay)
            desired_pitch_limit: $(var desired_pitch_limit)
            yaw_error_limit: $(var yaw_error_limit)
            dubins:
                radius: $(var dubins_radius)
                max_pitch: $(var dubins_max_pitch)
            lipb:
                radius: $(var dubins_radius)
            thruster_config:
                topic_prefix: $(var thruster_topic_prefix)
                topic_suffix: $(var thruster_topic_suffix)
                frame_base: $(var thruster_frame_base)
                max_thrust: $(var max_thrust)
                conversion_fcn: $(var thruster_conversion_fcn)
                conversion_fcn_params:
                    gain: $(var thruster_gain)
        </rosparam>
      </node>
    </group>

</launch>
